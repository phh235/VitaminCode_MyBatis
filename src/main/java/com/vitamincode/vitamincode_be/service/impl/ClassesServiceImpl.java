package com.vitamincode.vitamincode_be.service.impl;import com.vitamincode.vitamincode_be.convert.ClassMapStruct;import com.vitamincode.vitamincode_be.dto.request.ClassDtoRequest;import com.vitamincode.vitamincode_be.dto.response.ClassDtoResponse;import com.vitamincode.vitamincode_be.exception.AppException;import com.vitamincode.vitamincode_be.exception.ErrorCode;import com.vitamincode.vitamincode_be.mapper.ClassesMapper;import com.vitamincode.vitamincode_be.service.ClassesService;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;import java.util.List;import java.util.Objects;@Service@RequiredArgsConstructorpublic class ClassesServiceImpl implements ClassesService {    private final ClassesMapper classMapper;    private final ClassMapStruct classMapStruct;    @Override    public List<ClassDtoResponse> findAllClasses() {        var listEntityResponse = classMapper.findAllClasses();        if(listEntityResponse.isEmpty()) throw new AppException(ErrorCode.LIST_CLASS_EMPTY);        return classMapStruct.toClassDtoResponseList(listEntityResponse);    }    @Override    public List<ClassDtoResponse> findClassByClassName(String className) {        var listEntityResponse = classMapper.findClassByClassName(className);        if(listEntityResponse.isEmpty()) throw new AppException(ErrorCode.CLASS_NAME_NOT_EXIST);        return classMapStruct.toClassDtoResponseList(listEntityResponse);    }    @Override    public ClassDtoResponse findClassById(Integer classId) {        var resultEntity = classMapper.findClassById(classId);        if (Objects.isNull(resultEntity)) throw new AppException(ErrorCode.CLASS_EMPTY);        return classMapStruct.toClassDtoResponse(resultEntity);    }    @Override    public Integer insertClass(ClassDtoRequest classDtoRequest) {        var classEntity = classMapStruct.toClass(classDtoRequest);        int result = classMapper.insertClass(classEntity);        if (result == 0) throw new AppException(ErrorCode.INSERT_FAIL);        return result;    }    @Override    public Integer updateClass(ClassDtoRequest classDtoRequest) {        var classEntity = classMapStruct.toClass(classDtoRequest);        int result = classMapper.updateClass(classEntity);        if (result == 0) throw new AppException(ErrorCode.UPDATE_FAIL);        return result;    }    @Override    public Integer deleteClass(Integer classId) {        int result = classMapper.deleteClass(classId);        if (result == 0) throw new AppException(ErrorCode.DELETE_FAIL);        return result;    }}