package com.vitamincode.vitamincode_be.service.impl;import com.vitamincode.vitamincode_be.convert.ClassMapStruct;import com.vitamincode.vitamincode_be.dto.request.ClassDtoRequest;import com.vitamincode.vitamincode_be.dto.response.ClassDtoResponse;import com.vitamincode.vitamincode_be.mapper.ClassesMapper;import com.vitamincode.vitamincode_be.service.ClassesService;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;import java.util.List;import java.util.Objects;@Service@RequiredArgsConstructorpublic class ClassesServiceImpl implements ClassesService {    private final ClassesMapper classMapper;    private final ClassMapStruct classMapStruct;    @Override    public List<ClassDtoResponse> findAllClasses() {        List<ClassDtoResponse> classDtoResponseList = classMapper.findAllClasses()                .stream()                .map(classMapStruct::toClassDtoResponse)                .toList();        if (!classMapper.findAllClasses().isEmpty()) {            return classDtoResponseList;        }        return null;    }    @Override    public List<ClassDtoResponse> findClassByClassName(String className) {        var resultEntity = classMapper.findClassByClassName(className);        if (Objects.nonNull(resultEntity)) {            return resultEntity.stream()                    .map(classMapStruct::toClassDtoResponse)                    .toList();        }        return null;    }    @Override    public ClassDtoResponse findClassById(Integer classId) {        var resultEntity = classMapper.findClassById(classId);        if (Objects.nonNull(resultEntity)) {            return classMapStruct.toClassDtoResponse(resultEntity);        }        return null;    }    @Override    public Integer insertClass(ClassDtoRequest classDtoRequest) {        var classEntity = classMapStruct.toClass(classDtoRequest);        return classMapper.insertClass(classEntity);    }    @Override    public Integer updateClass(ClassDtoRequest classDtoRequest) {        var classEntity = classMapStruct.toClass(classDtoRequest);        return classMapper.updateClass(classEntity);    }    @Override    public Integer deleteClass(Integer classId) {        return classMapper.deleteClass(classId);    }}