package com.vitamincode.vitamincode_be.controller;import com.vitamincode.vitamincode_be.dto.request.ClassDtoRequest;import com.vitamincode.vitamincode_be.dto.response.ApiResponse;import com.vitamincode.vitamincode_be.exception.ErrorCode;import com.vitamincode.vitamincode_be.service.ClassesService;import lombok.RequiredArgsConstructor;import org.springframework.web.bind.annotation.*;@RestController@RequiredArgsConstructor@RequestMapping("/api/v1/classes/")public class ClassesApi {    private final ClassesService classesService;    @GetMapping("findAllClasses")    public ApiResponse<?> findAllClasses() {        return ApiResponse.builder()                .status(ErrorCode.HTTP_STATUS_200.getStatus())                .success(true)                .data(classesService.findAllClasses())                .message(ErrorCode.HTTP_STATUS_200.getMessage())                .build();    }    @GetMapping("findClassByClassName")    public ApiResponse<?> findClassByClassName(@RequestParam String className) {        return ApiResponse.builder()                .status(ErrorCode.HTTP_STATUS_200.getStatus())                .success(true)                .data(classesService.findClassByClassName(className))                .message(ErrorCode.HTTP_STATUS_200.getMessage())                .build();    }    @GetMapping("findClassById")    public ApiResponse<?> findClassById(@RequestParam Integer classId) {        return ApiResponse.builder()                .status(ErrorCode.HTTP_STATUS_200.getStatus())                .success(true)                .data(classesService.findClassById(classId))                .message(ErrorCode.HTTP_STATUS_200.getMessage())                .build();    }    @PostMapping("insertClass")    public ApiResponse<?> insertClass(@RequestBody ClassDtoRequest classEntity) {        Integer insertedId = classesService.insertClass(classEntity);        return ApiResponse.builder()                .status(ErrorCode.INSERT_SUCCESS.getStatus())                .success(true)                .data(insertedId)                .message(ErrorCode.INSERT_SUCCESS.getMessage())                .build();    }    @PostMapping("updateClass")    public ApiResponse<?> updateClass(@RequestBody ClassDtoRequest classEntity) {        Integer updatedRows = classesService.updateClass(classEntity);        return ApiResponse.builder()                .status(ErrorCode.UPDATE_SUCCESS.getStatus())                .success(true)                .data(updatedRows)                .message(ErrorCode.UPDATE_SUCCESS.getMessage())                .build();    }    @DeleteMapping("deleteClass")    public ApiResponse<?> deleteClass(@RequestParam("classId") Integer classId) {        Integer deletedRows = classesService.deleteClass(classId);        return ApiResponse.builder()                .status(ErrorCode.DELETE_SUCCESS.getStatus())                .success(true)                .data(deletedRows)                .message(ErrorCode.DELETE_SUCCESS.getMessage())                .build();    }    @PostMapping("isExist")    public ApiResponse<?> isExist(@RequestBody ClassDtoRequest classDtoRequest) {        Integer result = classesService.isExist(classDtoRequest);        return ApiResponse.builder()                .status(ErrorCode.HTTP_STATUS_200.getStatus())                .success(true)                .data(result)                .message(ErrorCode.HTTP_STATUS_200.getMessage())                .build();    }}