package com.vitamincode.vitamincode_be.controller;import com.vitamincode.vitamincode_be.dto.request.StudentDtoRequest;import com.vitamincode.vitamincode_be.dto.response.ApiResponse;import com.vitamincode.vitamincode_be.entity.Students;import com.vitamincode.vitamincode_be.exception.ErrorCode;import com.vitamincode.vitamincode_be.service.StudentsService;import lombok.RequiredArgsConstructor;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.LinkedHashMap;import java.util.Map;@RestController@RequiredArgsConstructor@RequestMapping("/api/v1/students/")public class StudentsApi {    private final StudentsService studentService;    @GetMapping("findAllStudents")    public ApiResponse<?> findAllStudents() {        return ApiResponse.builder()                .status(ErrorCode.HTTP_STATUS_200.getStatus())                .success(true)                .data(studentService.findAllStudents())                .message(ErrorCode.GET_SUCCESS.getMessage())                .build();    }    @GetMapping("findStudentById/{studentId}")    public ApiResponse<?> findStudentById(@PathVariable("studentId") Integer studentId) {        return ApiResponse.builder()                .status(ErrorCode.HTTP_STATUS_200.getStatus())                .success(true)                .data(studentService.findStudentById(studentId))                .message(ErrorCode.HTTP_STATUS_200.getMessage())                .build();    }    @PostMapping("insertStudent")    public ApiResponse<?> insertStudent(@RequestBody StudentDtoRequest studentEntity) {        Integer insertedId = studentService.insertStudent(studentEntity);        return ApiResponse.builder()                .status(ErrorCode.INSERT_SUCCESS.getStatus())                .success(true)                .data(insertedId)                .message(ErrorCode.INSERT_SUCCESS.getMessage())                .build();    }    @PostMapping("updateStudent")    public ApiResponse<?> updateStudent(@RequestBody StudentDtoRequest studentEntity) {        Integer updatedRow = studentService.updateStudent(studentEntity);        return ApiResponse.builder()                .status(ErrorCode.UPDATE_SUCCESS.getStatus())                .success(true)                .data(updatedRow)                .message(ErrorCode.UPDATE_SUCCESS.getMessage())                .build();    }    @DeleteMapping("deleteStudent")    public ApiResponse<?> deleteStudent(@RequestParam("studentId") Integer studentId) {        Integer deletedRow = studentService.deleteStudent(studentId);        return ApiResponse.builder()                .status(ErrorCode.DELETE_SUCCESS.getStatus())                .success(true)                .data(deletedRow)                .message(ErrorCode.DELETE_SUCCESS.getMessage())                .build();    }}